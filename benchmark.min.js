var $=Object.defineProperty;var x=(e,t,n)=>t in e?$(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var w=(e,t,n)=>(x(e,typeof t!="symbol"?t+"":t,n),n);(function(){"use strict";const styles=`body{background:var(--body-bg);color:var(--color);--code-bg: #ddd;--input-bg: #ddd;--input-color: black;--icon-color: #777;--button-bg: #ddd;--button-bg-hover: #eee;--button-color: black;--color-green: green;--color-orange: blue;--color-blue: #00f;--color-gray: #888;--color-gray-lighter: #666}@media (prefers-color-scheme: dark){body{--body-bg: #222;--color: #aaa;--input-bg: black;--icon-color: white;--code-bg: #111;--input-color: #aaa;--button-bg: #444;--button-bg-hover: #555;--button-color: #eee;--color-green: lime;--color-blue: #0ff;--color-orange: orange;--color-gray-lighter: #aaa}}.color-orange{color:var(--color-orange)!important}.color-gray{color:var(--color-gray)!important}.color-green{color:var(--color-green)!important}.color-blue{color:var(--color-blue)!important}.blink{animation:blinker .5s linear infinite}@keyframes blinker{50%{opacity:0}}.run-status{margin-top:-20px;padding:10px;opacity:.6}.toolbar{user-select:none}.btn-icon{cursor:pointer;transition:transform .2s,opacity .2s;opacity:.7;display:inline-block;vertical-align:middle;position:relative;top:-4px;left:0;fill:var(--icon-color)}.btn-icon:hover{transform:scale(1.2);opacity:1}.btn-icon:active{top:-3px;left:1px}.benchmarks{padding:0;margin:0}.benchmarking .benchmarks .eval,.benchmarking .benchmarks h2{display:none}.benchmarks *{font-family:monospace}.benchmarks *{scrollbar-width:auto;scrollbar-color:#737373 #000000}.benchmarks *::-webkit-scrollbar{width:10px;height:10px}.benchmarks *::-webkit-scrollbar-track{background:#000000}.benchmarks *::-webkit-scrollbar-track:hover{background-color:#111}.benchmarks *::-webkit-scrollbar-thumb{background-color:#555;border-radius:10px;border:1px none #292929}.benchmarks *::-webkit-scrollbar-thumb:hover{background-color:#737373}.benchmarks .test-list .log,.benchmarks .test-list .run-status,.benchmarks .test-list .run-title{white-space:pre}.benchmarks .test-list .run-title{opacity:.6;padding-inline:10px}.benchmarks .test-list>*{position:relative}.benchmarks .test-list>*>h2{font-size:14px;position:absolute;color:#fff;top:-21px;left:10px;background-color:var(--code-bg);border-radius:10px;padding:0 10px}.benchmarks .benchmark-group{display:inline-block}.benchmarks .benchmark-group>pre{display:block!important}.benchmarks .benchmark-group>pre[name=_default]{display:none!important}.benchmarks .code{margin-top:30px;display:block;padding:20px 10px 10px;overflow-x:auto;background-color:var(--code-bg)}.hide-code .benchmarks .code{display:none}.benchmarks .license{padding:10px;font-size:11px;color:#777;font-family:tahoma,Arial,Helvetica,sans-serif}.benchmarks .license a:hover{color:#aaa}.benchmarks .license *{font-family:inherit;color:inherit}.benchmarks .row{margin:15px 0}.benchmarks label{margin:0 10px}.benchmarks label.checkbox:hover{text-decoration:underline;cursor:pointer}.benchmarks input{background:var(--input-bg);border:none;outline:none;padding:5px;color:var(--input-color);margin-left:5px;max-width:100px}.benchmarks input,.benchmarks button{border-radius:3px}.benchmarks button{background:var(--button-bg);color:var(--button-color);border:none;outline:none;padding:5px 10px;cursor:pointer}.benchmarks button:hover{background:var(--button-bg-hover)}.benchmarks button[disabled]{opacity:.5;pointer-events:none}.benchmarks button svg{fill:var(--icon-color)}body.running .benchmarks .run-benchmark{display:none}.benchmarks .stop-benchmark{display:none;position:relative}body.running .benchmarks .stop-benchmark{display:inline-block}.benchmarks .run-benchmark,.benchmarks .stop-benchmark{min-width:100px;letter-spacing:2px}.benchmarks .run-benchmark svg,.benchmarks .stop-benchmark svg{position:relative;top:1px}.benchmarking .benchmarks .toggle-code{display:none}.benchmarks .toggle-code:after{content:"Hide code"}.hide-code .benchmarks .toggle-code:after{content:"Show code"}.benchmarks .back-to-code{display:none}.benchmarking .benchmarks .back-to-code{display:inline-block}.benchmarks .eval{max-height:min(100%,300px);padding:10px;margin-bottom:10px;white-space:nowrap}.hide-code .benchmarks .eval{margin:0;padding:0 10px}.benchmarks .eval.pre{white-space:pre}.benchmarks .eval.error{background-color:#200;color:#f87}.benchmarks .eval:empty{display:none}.benchmarks .ms:after{content:"ms";margin-left:3px}.benchmarks .log{padding-left:10px;cursor:pointer;user-select:none}.benchmarks .log:hover{background:#333}.benchmarks .log .title{visibility:hidden}.benchmarking .benchmarks .log .title{visibility:visible}.benchmarks .log b{color:var(--color-gray-lighter);font-weight:400}
`;HTMLElement.prototype.insert=function(e,t,...n){if(typeof n[0]=="object"){const i=n.shift();t=new Function(Object.keys(i).join(","),"return `"+t+"`")(...Object.values(i))}const r=document.createElement("div");r.innerHTML=t;const d=r.children[0];return this.insertAdjacentElement(e,r.children[0]),[d,...n.map(i=>d.querySelector(i))]},HTMLElement.prototype.append=function(){return this.insert("beforeend",...arguments)},HTMLElement.prototype.prepend=function(){return this.insert("afterbegin",...arguments)},Promise.timeout=function(e){return new Promise(t=>setTimeout(t,e))},Promise.requestAnimationFrame=function(){return new Promise(e=>requestAnimationFrame(e))},Array.prototype.trim=function(e=t=>!t){const t=(d,i)=>!e(d,i,this),n=this.findIndex(t);if(n===this.length-1)return[];const r=this.findLastIndex(t);return this.splice(r+1),this.splice(0,n),this},Object.defineProperty(Array.prototype,"tail",{get(){return this.at(-1)},set(e){this.push(e)}});class Queue{constructor({depth:t=1,delay:n=0,running:r=()=>!0}={}){w(this,"fns",[]);w(this,"current",[]);this.depth=t,this.delay=n,this.running=r}push(t){return new Promise(n=>{typeof t=="function"?this.fns.push([t,n]):this.fns.forEach(r=>this.push(r)),this.runNext()})}runNext(){if(!this.running()){this.fns.forEach(([n,r])=>r());return}let t=this.depth-this.current.length;for(;t--&&this.fns.length;)(([n,r])=>{this.current.push(n),n().then(async d=>{this.current.splice(this.current.indexOf(n),1),(this.current.length||this.fns.length)&&this.delay&&await Promise.timeout(this.delay),this.runNext(),r(d)})})(this.fns.shift())}stop(){this.running=()=>!1,this.fns.length=0}}const containerTpl=`<div class="benchmarks">
    <dialog><textarea></textarea></dialog>
    <div class="row toolbar">
        <button class="run-benchmark" title="Run 5 times for optimal result">
            <svg fill="#FFFFFF" height="12" width="12" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                viewBox="0 0 512 512" xml:space="preserve">
                <g>
                    <g>
                        <path d="M500.203,236.907L30.869,2.24c-6.613-3.285-14.443-2.944-20.736,0.939C3.84,7.083,0,13.931,0,21.333v469.333
			c0,7.403,3.84,14.251,10.133,18.155c3.413,2.112,7.296,3.179,11.2,3.179c3.264,0,6.528-0.747,9.536-2.24l469.333-234.667
			C507.435,271.467,512,264.085,512,256S507.435,240.533,500.203,236.907z" />
                    </g>
                </g>
            </svg>
            RUN</button>
        <button class="stop-benchmark">STOP</button>
        <label><input class="run-count" type="number" min="1" max="99" style="width:50px"> times</label>
        <label class="checkbox" style="display:none"><input class="run-multicore" type="checkbox" style="position:relative;top:2px">
            workers(\${numberOfWorkers})
            <span class="btn-icon btn-multicore-help" title="Help about workers">
                <svg fill="#FFFFFF" class="btn-help" version="1.1" xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    width="24px" height="24px" viewBox="0,0,256,256">
                    <g transform="scale(10.66667,10.66667)">
                        <path
                            d="M12,2c-5.52,0 -10,4.48 -10,10c0,5.52 4.48,10 10,10c5.52,0 10,-4.48 10,-10c0,-5.52 -4.48,-10 -10,-10zM13,19h-2v-2h2zM15.07,11.25l-0.9,0.92c-0.72,0.73 -1.17,1.33 -1.17,2.83h-2v-0.5c0,-1.1 0.45,-2.1 1.17,-2.83l1.24,-1.26c0.37,-0.36 0.59,-0.86 0.59,-1.41c0,-1.1 -0.9,-2 -2,-2c-1.1,0 -2,0.9 -2,2h-2c0,-2.21 1.79,-4 4,-4c2.21,0 4,1.79 4,4c0,0.88 -0.36,1.68 -0.93,2.25z">
                        </path>
                    </g>
                </svg>
            </span>
        </label>
        <label style="display:none">Cycles:<input placeholder="auto" class="cycles" type="number"></label>
        <span class="btn-copy btn-icon" title="Copy results in markdown">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path
                    d="M14,8H4c-1.103,0-2,0.897-2,2v10c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V10C16,8.897,15.103,8,14,8z" />
                <path
                    d="M20,2H10C8.896,2,8,2.896,8,4v2h1h7c1.104,0,2,0.896,2,2v7v1h2c1.104,0,2-0.896,2-2V4C22,2.896,21.104,2,20,2z" />
            </svg>
        </span>
        <label class="memory-heap" style="opacity:.7"></label>
        <!--<button class="back-to-code">Back to code</button>
        <button class="toggle-code"></button>-->
    </div>
    <div class="test-list">
        <div class="run-status"></div>
        <div class="run-title"></div>
    </div>
    <div class="license">
        <a target="_blank" href="https://github.com/silentmantra/benchmark">
            https://github.com/silentmantra/benchmark
        </a>
    </div>
</div>`,benchmarkTpl=`<div>
    <div class="eval"></div>
    <div class="log" data-idx="\${idx}"></div>
</div>`,groupTpl=`<div class="benchmark-group">
    <pre class="title" name="\${title}">\${title}</pre>
    <div class="benchmarks"></div>
</div>`;document.head.append(`<style>${styles}</style>`),document.body.classList.add("hide-code");const plural=new Intl.PluralRules("en",{type:"ordinal"}),suffixes=new Map([["one","st"],["two","nd"],["few","rd"],["other","th"]]),formatOrdinals=e=>{const t=plural.select(e),n=suffixes.get(t);return`${e}${n}`};init();async function init(){let scriptContainer=document.querySelector("script[name=benchmark],script[benchmark]");if(scriptContainer||(scriptContainer=[...document.querySelectorAll("script")].find(e=>e.textContent.match(/^\s*\/\/\s*@benchmark/m))),!scriptContainer){document.body.innerText="no benchmark script found";return}const $chunk=config("$chunk"),$length=config("$length"),$chunks=config("$chunks"),chunks=$chunks??($chunk||$length?[1,10,100,1e3]:[1]);let chunkLength;const getChunkLength=()=>chunkLength??(chunkLength=typeof $chunk=="function"?$chunk().length:$chunk?$chunk.length:$length),inputFillScript=(e=1)=>`
        let $chunkCount = ${e};
        if (Array.isArray($input)){
            if (typeof $chunk === 'function') {
                while($chunkCount--) $input.push(...$chunk());
            } else {
                while($chunkCount--) $input.push(...$chunk);
            }
        } else {
            while($chunkCount--) $input += $chunk;
        }
    `,lengthMultiplyScript=(e=1)=>`
         $length *= ${e};
    `,getBeforeScript=(e=1,t="")=>{let n=beforeScript;return $chunk&&(n=n.replace("/* @input fill */",inputFillScript(e))),$length&&(n=n.replace("/* @length multiply */",lengthMultiplyScript(e))),t&&(n+=";"+t),n+=";",n};let beforeScript="";const scripts=[];let group="_default";const _groups={};let script,commented=!1,skipping=!1;for(let e of scriptContainer.textContent.split(`
`)){if(/^\s*\/\*\s*@skip\s*\*\//.test(e))continue;if(skipping){/^\s*\/\/\s*@skip(\s*-\s*end)?/.test(e)&&(skipping=!1);continue}if(/^\s*\/\/\s*@skip(\s*-\s*start)?/.test(e)){skipping=!0;continue}if(/^\s*\/\*/.test(e)){commented=!0;continue}else if(commented&&/\*\/\s*$/.test(e)){commented=!1;continue}else if(commented)continue;if(/^\s*\/\/\s*@(end|footer)|^\s*\/\*\s*@end\s*\*\//.test(e))break;const t=e.match(new RegExp("(?<=@group\\s+).+(?=\\s*)$"));if(t){group=t[0];continue}const n=e.match(new RegExp("(?<=@benchmark\\s+).+(?=\\s*)$"));if(n){script&&scripts.push(script),_groups[group]=!0,script={title:n[0],group,source:""};continue}if(script){script.source+=e+`
`;continue}e.match(/^\s*(const|let)\s+\$input/)?e+="/* @input fill */":e.match(/^\s*let\s+\$length/)&&(e+="/* @length multiply */"),beforeScript+=e+`
`}script&&scripts.push(script);{const e=Math.max(...scripts.map(t=>t.title.length));scripts.forEach(t=>t.title=t.title.padEnd(e," "))}let numberOfWorkers=Math.max(1,Math.min(6,navigator.hardwareConcurrency/2|0));const multicore=config("WORKERS");typeof multicore=="number"&&(numberOfWorkers=multicore);const[$container,$groups]=document.body.append(eval("`"+containerTpl+"`"),".test-list");$container.querySelector(".run-count").value=config("TIMES",5),$container.querySelector(".run-multicore").checked=!!multicore,$container.querySelector(".btn-multicore-help").addEventListener("click",e=>{e.preventDefault(),alert("Use workers for development and getting fast estimation results. They are less precise (more difference between test cases). For publishing precise results use benchmarking on the main thread.")}),(async()=>{const e=$container.querySelector(".memory-heap");for(;;)await Promise.requestAnimationFrame(),e.textContent=Math.round(performance.memory.usedJSHeapSize/1024/1024)+"Mb"})();const groups=[];for(const e of Object.keys(_groups)){const[t,n]=$groups.append(groupTpl,{title:e},".benchmarks"),r={title:e,$group:t,$benchmarks:n,tests:[]};n.addEventListener("click",i=>{const b=i.target.closest(".log");if(!b)return;const f=b.dataset.idx;r.compareToTest=r.tests.find(h=>h.idx===+f),displayResults()}),document.addEventListener("mousedown",i=>{if(!n.contains(i.target)){debugger;delete r.compareToTest,displayResults()}});let d=-1;for(const i of scripts.filter(({group:b})=>b===e))d++,(async b=>{const[f,h]=n.append(benchmarkTpl,{...i,idx:b},".eval");let m;try{const[l]=await evalScript(i.source,getBeforeScript());m=JSON.stringify(l,null,4)}catch(l){m=l.message,h.classList.add("error")}i.source=i.source.trim(),i.source[0]==="{"&&i.source.at(-1)==="}"&&(i.source=i.source.slice(1,-1));let[o,s]=i.source.split(/\/\/\s*@run/);s||([s,o]=[o,s]),o??(o=""),h.innerHTML=[i.title.replace(/\s/g,"&nbsp;")+"&nbsp:",m===void 0?"undefined":m.toString().slice(0,500)].join("&nbsp;&nbsp;");let a;r.tests.push(a={...i,idx:b,code:s,pre:o,$benchmark:f,async benchmarkClone(l,p,u){var k,y;const c=+$container.querySelector("input.run-count").valueAsNumber||5,g=(y=(k=u.clone??(u.clone={}))[p]??(k[p]={}))[l]??(y[l]={duration:1/0,benchmarkedCount:0});if(g.benchmarkedCount<c){g.benchmarkedCount++;const v=await benchmarkScript(`for (let $__i = 0; $__i < ${l}; $__i++) {$clone()}`,getBeforeScript(p,o));v<g.duration&&(g.duration=v)}return g.duration},async benchmark(l=1,p=1,u={}){if(l===1)return benchmarkScript(s,getBeforeScript(p,o));if(config("$clone")){const g=await this.benchmarkClone(l,p,u);return await benchmarkScript(`for (let $__i = 0; $__i < ${l}; $__i++) {$input = $clone();${s}}`,getBeforeScript(p,o))-g}return benchmarkScript(`for (let $__i = 0; $__i < ${l}; $__i++) {${s}}`,getBeforeScript(p,o))},async benchmarkInWorker(l=1,p=1){let u=getBeforeScript(p,o),c;l===1?c=s:c=`for (let $__i = 0; $__i < ${l}; $__i++) {${s}}`;const g=new Function("",`
                            const result = {};
                            try {
                                ${u}
                                const __$start$ = performance.now();
                                ${c};
                                result.duration = Math.round(performance.now() - __$start$);
                            } catch (e) {
                                result.error = e;
                            }
                            return result;
                        `);return(await executeFunctionInWorker(g)).duration}})})(d);groups.push(r)}$container.querySelector(".btn-copy").addEventListener("click",e=>{var f;const t=(f=navigator.userAgent.match(/(Chrome|Firefox)\/\d+/))==null?void 0:f[0];let n=document.querySelector(".run-title").textContent;n.length&&(n=n.replace(/^./,">"),n+=`
`);let r=`
        \`\`\`
        \` ${t}
        ---
        ${n}${groups.map(h=>{const m=h.title==="_default",o=[];return m||o.push(h.title),h.$benchmarks.querySelectorAll(".log").forEach(s=>{o.push((m?"":"&nbsp;&nbsp;&nbsp;&nbsp;")+s.textContent)}),o.join(`
`)}).join(`
`)}
        ---
        https://github.com/silentmantra/benchmark \`
        \`\`\``.replace(/^\s+/mg,"").replaceAll("&nbsp;"," ");const d=Math.max(...r.split(`
`).map(h=>h.length));r=r.replaceAll("---","-".repeat(d));const i=document.querySelector("dialog"),b=i.querySelector("textarea");i.style.opacity=0,b.textContent=r,i.showModal(),b.focus(),b.select(),document.execCommand("copy"),i.close()});let running=!1;$container.querySelector(".stop-benchmark").addEventListener("click",()=>running=!1),$container.querySelector(".run-benchmark").addEventListener("click",async e=>{document.body.classList.add("benchmarking","running"),await Promise.timeout(),running=!0,await runBenchmark(),running=!1,document.body.classList.remove("running"),document.querySelector(".run-status").innerHTML=""});async function runBenchmark(){const e=[];groups.forEach(h=>{h.tests.forEach(m=>{m.$benchmark.querySelector(".log").textContent="",m.runs=Array.from(chunks,(o,s)=>e.tail={test:m,chunkCount:o,executions:[],diminisher:1,get duration(){return this.executions[0]??this._estimatedDuration},set duration(a){this._estimatedDuration=a},get count(){return h.count??h.runs[s].count/this.diminisher??1},get min(){return(this.executions[0]??1/0)*this.diminisher}})})}),await Promise.requestAnimationFrame();let t=config("CYCLES",0);const n=+$container.querySelector("input.run-count").valueAsNumber||5,r=$container.querySelector(".run-multicore").checked,d=h=>document.querySelector(".run-status").innerHTML=h+'&nbsp;<span class="blink">...</span>',i={},b=new Queue({depth:numberOfWorkers});t?groups.forEach(h=>h.count=t):(d("estimating cycles"),await Promise.all(groups.map(h=>Promise.all([...chunks.entries()].map(([m,o])=>b.push(async()=>{var p;let s=1,a=h.tests;const l=[];for(;;){for(const c of a)if(c.runs[m].duration=await c.benchmark(s,o,i),!running)return;const u=a.filter(c=>c.runs[m].duration<20);if(l.push(...a.filter(c=>c.runs[m].duration>=100)),l.forEach(c=>c.runs[m].diminisher*=10),!u.length){((p=h.runs??(h.runs=[]))[m]??(p[m]={})).count=s*10;break}a=a.filter(c=>c.runs[m].duration<100),s*=10}}))))));const f=new Queue({depth:r?numberOfWorkers:1,delay:r?0:500,running:()=>running});return Promise.all(Array.from({length:n},(h,m)=>Promise.all([...chunks.entries()].map(([o,s])=>Promise.all(groups.map(({tests:a,$benchmarks:l,runs:p})=>Promise.all(a.map(async u=>f.push(async()=>{var k;const c=u.runs[o];d(formatOrdinals(m+1)+" "+(chunks.length>1?`running ${u.title} with n=${s*getChunkLength()}`:`running ${u.title}`)),(k=u.$benchmark.querySelector(`.run-${o}`))==null||k.classList.add("blink"),await Promise.requestAnimationFrame();const g=await u[r?"benchmarkInWorker":"benchmark"](c.count,s,i);running&&(c.executions.push(g),c.executions.sort((y,v)=>y-v),displayResults())})))))))))}function displayResults(){[...chunks.entries()].forEach(([e,t])=>groups.forEach(({tests:n,$benchmarks:r,compareToTest:d})=>n.forEach(i=>{if(!n.some(o=>o.runs))return;n.sort((o,s)=>o.runs[e].min-s.runs[e].min).forEach(o=>r.appendChild(o.$benchmark));const b=(d==null?void 0:d.runs[e].min)??n[0].runs[e].min;n.forEach((o,s)=>{const a=o.runs[e].min/b;if(a===1){o.runs[e].diff="■ 1.00x";return}o.runs[e].diff=isNaN(a)?"":a.toFixed(2)+"x"}),n.sort((o,s)=>(o=o.runs.findLast(a=>a.executions.length),s=s.runs.findLast(a=>a.executions.length),!o||!s?0:o.min-s.min)).forEach(o=>r.appendChild(o.$benchmark));const f=o=>{if(isNaN(o))return"";const s=o.toString().length,a=(s-1)/3|0,l=["","k","m","b"];return"x"+o.toString().slice(0,1+(s-1)%3)+l[a]},h=o=>(o/1e3).toFixed(1).replace(/^0/,"")+"s",m=o=>o.trim()==="■ 1.00x"?"color-green":o.trim().startsWith("0.")?"color-blue":"color-orange";for(const[o,s]of n.entries()){const a=l=>{const p=n.map(l);return(p[o]??"").toString().padStart(Math.max(...p.map(c=>(c==null?void 0:c.toString().length)||0))," ")};if(chunks.length===1){if(!s.runs[e].executions.length)return"";const l=a(p=>p.runs[0].diff);s.$benchmark.querySelector(".log").innerHTML=['<span class="title">'+s.title.replace(/\s/g," ")+" </span>",`<b class="${m(l)} run-0" title="Difference from fastest solution (with fastest results)">${l}</b>`,"|",'<span title="Number of cycles">'+a(p=>"x"+p.runs[0].count)+"</span>",...s.runs[0].executions.map((p,u)=>"<b>"+a(c=>{var g;return(g=c.runs[e].executions)==null?void 0:g[u]})+"</b>")].join(" ")}else{s.$benchmark.querySelector(".log").innerHTML=['<span class="title">'+s.title.replace(/\s/g," ")+" </span>",s.runs.filter(p=>p.executions.length).map((p,u)=>{const c=`n=${chunks[u]*getChunkLength()}`,g=a(y=>y.runs[u].diff);return(`<b class="${m(g)} run-${u}" title="Difference from fastest solution (with fastest results)">`+g+' <span class="color-gray">'+a(y=>f(y.runs[u].count))+" <b>"+a(y=>y.runs[u].duration)+"</b></span></b>").padStart(c.length," ")}).join(" | ")].join("  ");const l=document.querySelector(".run-title");l.innerHTML=[" ".repeat(s.title.length)+" ",chunks.map((p,u)=>{const c=`n=${p*getChunkLength()}`;if(!s.runs[u].executions)return"";const g=a(k=>k.runs[u].diff)+" "+a(k=>f(k.runs[u].count))+" "+a(k=>k.runs[u].duration);return c.padStart((g.length+c.length)/2," ").padEnd(g.length," ")}).filter(Boolean).join(" | ")].join("  ")}}})))}}function executeFunctionInWorker(e){return new Promise(t=>{const n=new Blob([`
      let start = performance.now();
      const result = (${e.toString()})();
      postMessage({result, duration: performance.now() - start});
      `],{type:"application/javascript"});new Worker(URL.createObjectURL(n)).addEventListener("message",d=>{t(d.data)})})}async function benchmarkScript(e,t=""){const n=document.createElement("script"),r=Math.random().toString().slice(2).split("").reverse().join("");return n.src="data:text/javascript;base64,"+btoa(`
        try {
            ${t}
            const __$start$ = performance.now();
            ${e};
            window.__duration${r} = Math.round(performance.now() - __$start$);
        } catch (e) {
            window.__error${r} = e;
        }
    `),document.body.appendChild(n),new Promise((d,i)=>{n.onload=()=>{if(window["__error"+r]){const f=window["__error"+r];delete window["__error"+r],i(f)}const b=window["__duration"+r];delete window["__duration"+r],location.host==="localhost"||n.remove(),d(b)},n.onerror=i})}async function evalScript(e,t=""){const n=document.createElement("script"),r=Math.random().toString().slice(2).split("").reverse().join(""),d=e.replaceAll("\\","\\\\").replaceAll("`","\\`").replaceAll("${","\\${");return n.src="data:text/javascript;base64,"+btoa(`
        try {
            ${t}
            window.__result${r} = eval(\`${d}\`);
        } catch (e) {
            window.__error${r} = e;
        }
    `),document.body.appendChild(n),new Promise((i,b)=>{n.onload=()=>{if(window["__error"+r]){const h=window["__error"+r];delete window["__error"+r],b(h)}const f=window["__result"+r];delete window["__result"+r],location.host==="localhost"||n.remove(),i([f])},n.onerror=b})}function config(name,...vals){try{return eval(name)}catch(e){return vals.find(Boolean)}}})();
