(function(){"use strict";const styles=`body{background:var(--body-bg);color:var(--color);--code-bg: #ddd;--input-bg: #ddd;--input-color: black;--icon-color: #777;--button-bg: #ddd;--button-bg-hover: #eee;--button-color: black;--color-green: green;--color-orange: blue;--color-gray: #888}@media (prefers-color-scheme: dark){body{--body-bg: #222;--color: #aaa;--input-bg: black;--icon-color: white;--code-bg: #111;--input-color: #aaa;--button-bg: #444;--button-bg-hover: #555;--button-color: #eee;--color-green: lime;--color-orange: orange}}.color-orange{color:var(--color-orange)!important}.color-gray{color:var(--color-gray)!important}.blink{animation:blinker .5s linear infinite}@keyframes blinker{50%{opacity:0}}.run-status{margin-top:-20px;padding:10px;opacity:.6}.btn-copy{cursor:pointer;transition:transform .2s,opacity .2s;opacity:.7;display:inline-block;vertical-align:middle;position:relative;top:-4px;left:0;fill:var(--icon-color)}.btn-copy:hover{transform:scale(1.2);opacity:1}.btn-copy:active{top:-3px;left:1px}.benchmarks{padding:0;margin:0}.benchmarking .benchmarks .eval,.benchmarking .benchmarks h2{display:none}.benchmarks *{font-family:monospace}.benchmarks *{scrollbar-width:auto;scrollbar-color:#737373 #000000}.benchmarks *::-webkit-scrollbar{width:10px;height:10px}.benchmarks *::-webkit-scrollbar-track{background:#000000}.benchmarks *::-webkit-scrollbar-track:hover{background-color:#111}.benchmarks *::-webkit-scrollbar-thumb{background-color:#555;border-radius:10px;border:1px none #292929}.benchmarks *::-webkit-scrollbar-thumb:hover{background-color:#737373}.benchmarks .test-list .log,.benchmarks .test-list .run-status,.benchmarks .test-list .run-title{white-space:pre}.benchmarks .test-list .run-title{opacity:.6;padding-inline:10px}.benchmarks .test-list>*{position:relative}.benchmarks .test-list>*>h2{font-size:14px;position:absolute;color:#fff;top:-21px;left:10px;background-color:var(--code-bg);border-radius:10px;padding:0 10px}.benchmarks .benchmark-group>pre{display:block!important}.benchmarks .benchmark-group>pre[name=_default]{display:none!important}.benchmarks .code{margin-top:30px;display:block;padding:20px 10px 10px;overflow-x:auto;background-color:var(--code-bg)}.hide-code .benchmarks .code{display:none}.benchmarks .license{padding:10px;font-size:11px;color:#777;font-family:tahoma,Arial,Helvetica,sans-serif}.benchmarks .license a:hover{color:#aaa}.benchmarks .license *{font-family:inherit;color:inherit}.benchmarks .row{margin:15px 0}.benchmarks label{margin:0 10px}.benchmarks input{background:var(--input-bg);border:none;outline:none;padding:5px;color:var(--input-color);margin-left:5px;max-width:100px}.benchmarks input,.benchmarks button{border-radius:3px}.benchmarks button{background:var(--button-bg);color:var(--button-color);border:none;outline:none;padding:5px 10px;cursor:pointer}.benchmarks button:hover{background:var(--button-bg-hover)}.benchmarks button[disabled]{opacity:.5;pointer-events:none}.benchmarks button svg{fill:var(--icon-color)}body.running .benchmarks .run-benchmark{display:none}.benchmarks .stop-benchmark{display:none;position:relative}body.running .benchmarks .stop-benchmark{display:inline-block}.benchmarks .run-benchmark,.benchmarks .stop-benchmark{min-width:100px;letter-spacing:2px}.benchmarks .run-benchmark svg,.benchmarks .stop-benchmark svg{position:relative;top:1px}.benchmarking .benchmarks .toggle-code{display:none}.benchmarks .toggle-code:after{content:"Hide code"}.hide-code .benchmarks .toggle-code:after{content:"Show code"}.benchmarks .back-to-code{display:none}.benchmarking .benchmarks .back-to-code{display:inline-block}.benchmarks .eval{max-height:min(100%,300px);padding:10px;margin-bottom:10px;white-space:nowrap}.hide-code .benchmarks .eval{margin:0;padding:0 10px}.benchmarks .eval.pre{white-space:pre}.benchmarks .eval.error{background-color:#200;color:#f87}.benchmarks .eval:empty{display:none}.benchmarks .ms:after{content:"ms";margin-left:3px}.benchmarks .log{padding-left:10px}.benchmarks .log .title{visibility:hidden}.benchmarking .benchmarks .log .title{visibility:visible}.benchmarks .log b{color:var(--color-green);font-weight:400}
`;HTMLElement.prototype.insert=function(e,s,...r){if(typeof r[0]=="object"){const t=r.shift();s=new Function(Object.keys(t).join(","),"return `"+s+"`")(...Object.values(t))}const o=document.createElement("div");o.innerHTML=s;const p=o.children[0];return this.insertAdjacentElement(e,o.children[0]),[p,...r.map(t=>p.querySelector(t))]},HTMLElement.prototype.append=function(){return this.insert("beforeend",...arguments)},HTMLElement.prototype.prepend=function(){return this.insert("afterbegin",...arguments)},Promise.timeout=function(e){return new Promise(s=>setTimeout(s,e))},Promise.requestAnimationFrame=function(){return new Promise(e=>requestAnimationFrame(e))},Array.prototype.trim=function(e=s=>!s){const s=(p,t)=>!e(p,t,this),r=this.findIndex(s);if(r===this.length-1)return[];const o=this.findLastIndex(s);return this.splice(o+1),this.splice(0,r),this};const containerTpl=`<div class="benchmarks">
    <dialog><textarea></textarea></dialog>
    <div class="row toolbar">
        <button class="run-benchmark" title="Run 5 times for optimal result">
            <svg fill="#FFFFFF" height="12" width="12" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                viewBox="0 0 512 512" xml:space="preserve">
                <g>
                    <g>
                        <path d="M500.203,236.907L30.869,2.24c-6.613-3.285-14.443-2.944-20.736,0.939C3.84,7.083,0,13.931,0,21.333v469.333
			c0,7.403,3.84,14.251,10.133,18.155c3.413,2.112,7.296,3.179,11.2,3.179c3.264,0,6.528-0.747,9.536-2.24l469.333-234.667
			C507.435,271.467,512,264.085,512,256S507.435,240.533,500.203,236.907z" />
                    </g>
                </g>
            </svg>
            RUN</button>
            <button class="stop-benchmark">STOP</button>            
        <label><input class="run-count" type="number" min="1" max="99" style="width:50px"> times</label>
        <label>Cycles:<input placeholder="auto" class="cycles" type="number"></label>
        <span class="btn-copy" title="Copy results in markdown">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path
                    d="M14,8H4c-1.103,0-2,0.897-2,2v10c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V10C16,8.897,15.103,8,14,8z" />
                <path
                    d="M20,2H10C8.896,2,8,2.896,8,4v2h1h7c1.104,0,2,0.896,2,2v7v1h2c1.104,0,2-0.896,2-2V4C22,2.896,21.104,2,20,2z" />
            </svg>
        </span>
        <!--<button class="back-to-code">Back to code</button>
        <button class="toggle-code"></button>-->
    </div>
    <div class="test-list">
        <div class="run-status"></div>
        <div class="run-title"></div>
    </div>
    <div class="license">
        <a target="_blank" href="https://github.com/silentmantra/benchmark">
            https://github.com/silentmantra/benchmark
        </a>
    </div>
</div>`,benchmarkTpl=`<div>
    <div class="eval"></div>
    <div class="log"></div>
</div>`,groupTpl=`<div class="benchmark-group">
    <pre class="title" name="\${title}">\${title}</pre>
    <div class="benchmarks"></div>
</div>`;document.head.append(`<style>${styles}</style>`),document.body.classList.add("hide-code"),init();async function init(){let scriptContainer=document.querySelector("script[name=benchmark],script[benchmark]");if(scriptContainer||(scriptContainer=[...document.querySelectorAll("script")].find(e=>e.textContent.match(/^\s*\/\/\s*@benchmark/m))),!scriptContainer){document.body.innerText="no benchmark script found";return}let beforeScript="";const scripts=[];let group="_default";const _groups={};let script,commented=!1;for(const e of scriptContainer.textContent.split(`
`)){if(/^\s*\/\*/.test(e)){commented=!0;continue}else if(commented&&/\*\/\s*$/.test(e)){commented=!1;continue}else if(commented)continue;if(/^\s*\/\/\s*@(end|footer)|^\s*\/\*\s*@end\s*\*\//.test(e))break;const s=e.match(new RegExp("(?<=@group\\s+).+(?=\\s*)$"));if(s){group=s[0];continue}const r=e.match(new RegExp("(?<=@benchmark\\s+).+(?=\\s*)$"));if(r){script&&scripts.push(script),_groups[group]=!0,script={title:r[0],group,source:""};continue}if(script){script.source+=e+`
`;continue}beforeScript+=e+`
`}script&&scripts.push(script);{const e=Math.max(...scripts.map(s=>s.title.length));scripts.forEach(s=>s.title=s.title.padEnd(e," "))}const $chunk=config("$chunk"),chunks=$chunk?[1,10,100,1e3]:[1],[$container,$groups]=document.body.append(eval("`"+containerTpl+"`"),".test-list"),inputFillScript=(e=1)=>`
    let $chunkCount = ${e};
        if (Array.isArray($input)){
            while($chunkCount--) $input.push(...$chunk);
        } else {
            while($chunkCount--) $input += $chunk;
        }
    `,groups=[];for(const e of Object.keys(_groups)){const[s,r]=$groups.append(groupTpl,{title:e},".benchmarks"),o={title:e,$group:s,$benchmarks:r,tests:[]};for(const p of scripts.filter(({group:t})=>t===e)){const[t,n]=r.append(benchmarkTpl,{...p},".eval");(async()=>{let h;try{const d=config("$chunk");let y=beforeScript;d&&(y+=inputFillScript());const[l]=await evalScript(p.source,y+";");h=JSON.stringify(l,null,4)}catch(d){h=d.message,n.classList.add("error")}let[i,m]=p.source.split(/\/\/\s*@run/);m||([m,i]=[i,m]),i??(i=""),n.innerHTML=[p.title.replace(/\s/g,"&nbsp;")+"&nbsp:",h.toString().slice(0,500)].join("&nbsp;&nbsp;"),o.tests.push({...p,code:m,pre:i,$benchmark:t,benchmark(d=1,y=1){const l=config("$chunk");let g=beforeScript;return l&&(g+=inputFillScript(y)),g+=";"+i,benchmarkScript(d===1?m:`for (let $__i = 0; $__i < ${d}; $__i++) {${m}}`,g)}})})()}groups.push(o)}$container.querySelector(".cycles").value=config("CYCLES",scriptContainer.getAttribute("benchmark"),scriptContainer.dataset.count),$container.querySelector(".run-count").value=config("TIMES",5),$container.querySelector(".btn-copy").addEventListener("click",e=>{var h;const s=(h=navigator.userAgent.match(/(Chrome|Firefox)\/\d+/))==null?void 0:h[0];let r=document.querySelector(".run-title").textContent;r.length&&(r=r.replace(/^./,">"),r+=`
`);let o=`
        \`\`\`
        \` ${s}
        ---
        ${r}${groups.map(i=>{const m=i.title==="_default",d=[];return m||d.push(i.title),i.$benchmarks.querySelectorAll(".log").forEach(y=>{d.push((m?"":"&nbsp;&nbsp;&nbsp;&nbsp;")+y.textContent)}),d.join(`
`)}).join(`
`)}
        ---
        https://github.com/silentmantra/benchmark \`
        \`\`\``.replace(/^\s+/mg,"").replaceAll("&nbsp;"," ");const p=Math.max(...o.split(`
`).map(i=>i.length));o=o.replaceAll("---","-".repeat(p));const t=document.querySelector("dialog"),n=t.querySelector("textarea");t.style.opacity=0,n.textContent=o,t.showModal(),n.focus(),n.select(),document.execCommand("copy"),t.close()});let running=!1;$container.querySelector(".stop-benchmark").addEventListener("click",()=>running=!1),$container.querySelector(".run-benchmark").addEventListener("click",async e=>{document.body.classList.add("benchmarking","running"),await Promise.timeout(),running=!0,await runBenchmark(),running=!1,document.body.classList.remove("running"),document.querySelector(".run-status").innerHTML=""});async function runBenchmark(){var o,p;groups.forEach(t=>{t.tests.forEach(n=>{n.$benchmark.querySelector(".log").textContent="",n.runs=Array.from(chunks,()=>({diminisher:1}))})}),await Promise.requestAnimationFrame();let e=$container.querySelector("input.cycles").valueAsNumber;const s=+$container.querySelector("input.run-count").valueAsNumber||5,r=t=>document.querySelector(".run-status").innerHTML=t+'&nbsp;<span class="blink">...</span>';if(e)groups.forEach(t=>t.count=e);else{r("estimating cycles");for(const t of groups)for(const[n,h]of chunks.entries()){let i=1,m=t.tests;const d=[];for(;;){for(const l of m)if(l.runs[n].duration=await l.benchmark(i,h),!running)return;const y=m.filter(l=>l.runs[n].duration<20);if(d.push(...m.filter(l=>l.runs[n].duration>=100)),d.forEach(l=>l.runs[n].diminisher*=10),!y.length){((o=t.runs??(t.runs=[]))[n]??(o[n]={})).count=i*10;break}m=m.filter(l=>l.runs[n].duration<100),i*=10}}}for(let t=0;t<s;t++)for(const[n,h]of chunks.entries()){for(const{tests:i,$benchmarks:m,runs:d}of groups)for(const[y,l]of[...i].entries()){const g=l.runs[n];r(chunks.length>1?`running ${l.title} with n=${h*$chunk.length}`:`running ${l.title}`),(p=l.$benchmark.querySelector(`.run-${n}`))==null||p.classList.add("blink"),await Promise.requestAnimationFrame();const _=await l.benchmark(d[n].count/g.diminisher|0,h);if(!running)return;(g.executions??(g.executions=[])).push(_),g.executions.sort((c,a)=>c-a),g.min=g.executions[0],i.sort((c,a)=>c.runs[n].min*c.runs[n].diminisher-a.runs[n].min*a.runs[n].diminisher).forEach(c=>m.appendChild(c.$benchmark));const C=(i[0].runs[n].min||0)*i[0].runs[n].diminisher;i.forEach((c,a)=>{if(a){const u=c.runs[n].min*c.runs[n].diminisher/C;c.runs[n].diff=isNaN(u)?"":u.toFixed(2)+"x"}else c.runs[n].diff="1.00x"}),i.sort((c,a)=>(c=c.runs.findLast(u=>u.executions),a=a.runs.findLast(u=>u.executions),!c||!a?0:c.min*c.diminisher-a.min*a.diminisher)).forEach(c=>m.appendChild(c.$benchmark));const S=c=>{if(isNaN(c))return"";const a=c.toString().length,u=(a-1)/3|0,v=["","k","m","b"];return"x"+c.toString().slice(0,1+(a-1)%3)+v[u]},q=c=>(c/1e3).toFixed(1).replace(/^0/,"")+"s";for(const[c,a]of i.filter(u=>u.runs[n].executions).entries()){const u=v=>{const w=i.map(v);return(w[c]??"").toString().padStart(Math.max(...w.map(f=>(f==null?void 0:f.toString().length)||0))," ")};if(chunks.length===1)a.$benchmark.querySelector(".log").innerHTML=['<span class="title">'+a.title.replace(/\s/g," ")+" </span>",'<b class="color-orange run-0" title="Difference from fastest solution (with fastest results)">'+u(v=>v.runs[0].diff)+"</b>","|",'<span title="Number of cycles">'+u(v=>"x"+d[0].count/v.runs[0].diminisher)+"</span>",...a.runs[0].executions.map((v,w)=>"<b>"+u(b=>{var f;return(f=b.runs[n].executions)==null?void 0:f[w]})+"</b>")].join(" ");else{a.$benchmark.querySelector(".log").innerHTML=['<span class="title">'+a.title.replace(/\s/g," ")+" </span>",a.runs.filter(w=>w.executions).map((w,b)=>{const f=`n=${chunks[b]*$chunk.length}`;return(`<b class="color-orange run-${b}" title="Difference from fastest solution (with fastest results)">`+u(k=>k.runs[b].diff)+' <span class="color-gray">'+u(k=>S(d[b].count/k.runs[b].diminisher))+" <b>"+u(k=>{var x;return(x=k.runs[b].executions)==null?void 0:x[0]})+"</b></span></b>").padStart(f.length," ")}).join(" | ")].join("  ");const v=document.querySelector(".run-title");v.innerHTML=[" ".repeat(a.title.length)+" ",chunks.map((w,b)=>{const f=`n=${w*$chunk.length}`;if(!a.runs[b].executions)return"";const $=u(k=>k.runs[b].diff)+" "+u(k=>S(d[b].count/k.runs[b].diminisher))+" "+u(k=>{var x;return(x=k.runs[b].executions)==null?void 0:x[0]});return f.padStart(($.length+f.length)/2," ").padEnd($.length," ")}).filter(Boolean).join(" | ")].join("  ")}}if(l!==i.at(-1)&&await Promise.timeout(1e3),!running)return}if(t<s.length-1&&await Promise.timeout(1e3),!running)return}}}async function benchmarkScript(e,s=""){const r=document.createElement("script"),o=Math.random().toString().slice(2).split("").reverse().join("");return r.src="data:text/javascript;base64,"+btoa(`
        try {
            ${s}
            const __$start$ = performance.now();
            ${e};
            window.__duration${o} = Math.round(performance.now() - __$start$);
        } catch (e) {
            window.__error${o} = e;
        }
    `),document.body.appendChild(r),new Promise((p,t)=>{r.onload=()=>{if(window["__error"+o]){const h=window["__error"+o];delete window["__error"+o],t(h)}const n=window["__duration"+o];delete window["__duration"+o],r.remove(),p(n)},r.onerror=t})}async function evalScript(e,s=""){const r=document.createElement("script"),o=Math.random().toString().slice(2).split("").reverse().join(""),p="`"+e.replaceAll("\\","\\\\").replaceAll("`","\\`")+"`";return r.src="data:text/javascript;base64,"+btoa(`
        try {
            ${s}
            window.__result${o} = eval(${p});
        } catch (e) {
            window.__error${o} = e;
        }
    `),document.body.appendChild(r),new Promise((t,n)=>{r.onload=()=>{if(window["__error"+o]){const i=window["__error"+o];delete window["__error"+o],n(i)}const h=window["__result"+o];delete window["__result"+o],r.remove(),t([h])},r.onerror=n})}function config(name,...vals){try{return eval(name)}catch(e){return vals.find(Boolean)}}})();
