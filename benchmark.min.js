(function(){"use strict";const styles=`body{background:var(--body-bg);color:var(--color);--code-bg: #ddd;--input-bg: #ddd;--input-color: black;--icon-color: #777;--button-bg: #ddd;--button-bg-hover: #eee;--button-color: black;--color-green: green;--color-orange: blue;--color-gray: #888}@media (prefers-color-scheme: dark){body{--body-bg: #222;--color: #aaa;--input-bg: black;--icon-color: white;--code-bg: #111;--input-color: #aaa;--button-bg: #444;--button-bg-hover: #555;--button-color: #eee;--color-green: lime;--color-orange: orange}}.color-orange{color:var(--color-orange)!important}.color-gray{color:var(--color-gray)!important}.blink{animation:blinker .5s linear infinite}@keyframes blinker{50%{opacity:0}}.run-status{margin-top:-20px;padding:10px;opacity:.6}.btn-copy{cursor:pointer;transition:transform .2s,opacity .2s;opacity:.7;display:inline-block;vertical-align:middle;position:relative;top:-4px;left:0;fill:var(--icon-color)}.btn-copy:hover{transform:scale(1.2);opacity:1}.btn-copy:active{top:-3px;left:1px}.benchmarks{padding:0;margin:0}.benchmarking .benchmarks .eval,.benchmarking .benchmarks h2{display:none}.benchmarks *{font-family:monospace}.benchmarks *{scrollbar-width:auto;scrollbar-color:#737373 #000000}.benchmarks *::-webkit-scrollbar{width:10px;height:10px}.benchmarks *::-webkit-scrollbar-track{background:#000000}.benchmarks *::-webkit-scrollbar-track:hover{background-color:#111}.benchmarks *::-webkit-scrollbar-thumb{background-color:#555;border-radius:10px;border:1px none #292929}.benchmarks *::-webkit-scrollbar-thumb:hover{background-color:#737373}.benchmarks .test-list .log,.benchmarks .test-list .run-status,.benchmarks .test-list .run-title{white-space:pre}.benchmarks .test-list .run-title{opacity:.6;padding-inline:10px}.benchmarks .test-list>*{position:relative}.benchmarks .test-list>*>h2{font-size:14px;position:absolute;color:#fff;top:-21px;left:10px;background-color:var(--code-bg);border-radius:10px;padding:0 10px}.benchmarks .benchmark-group>pre{display:block!important}.benchmarks .benchmark-group>pre[name=_default]{display:none!important}.benchmarks .code{margin-top:30px;display:block;padding:20px 10px 10px;overflow-x:auto;background-color:var(--code-bg)}.hide-code .benchmarks .code{display:none}.benchmarks .license{padding:10px;font-size:11px;color:#777;font-family:tahoma,Arial,Helvetica,sans-serif}.benchmarks .license a:hover{color:#aaa}.benchmarks .license *{font-family:inherit;color:inherit}.benchmarks .row{margin:15px 0}.benchmarks label{margin:0 10px}.benchmarks input{background:var(--input-bg);border:none;outline:none;padding:5px;color:var(--input-color);margin-left:5px;max-width:100px}.benchmarks input,.benchmarks button{border-radius:3px}.benchmarks button{background:var(--button-bg);color:var(--button-color);border:none;outline:none;padding:5px 10px;cursor:pointer}.benchmarks button:hover{background:var(--button-bg-hover)}.benchmarks button[disabled]{opacity:.5;pointer-events:none}.benchmarks button svg{fill:var(--icon-color)}body.running .benchmarks .run-benchmark{display:none}.benchmarks .stop-benchmark{display:none;position:relative}body.running .benchmarks .stop-benchmark{display:inline-block}.benchmarks .run-benchmark,.benchmarks .stop-benchmark{min-width:100px;letter-spacing:2px}.benchmarks .run-benchmark svg,.benchmarks .stop-benchmark svg{position:relative;top:1px}.benchmarking .benchmarks .toggle-code{display:none}.benchmarks .toggle-code:after{content:"Hide code"}.hide-code .benchmarks .toggle-code:after{content:"Show code"}.benchmarks .back-to-code{display:none}.benchmarking .benchmarks .back-to-code{display:inline-block}.benchmarks .eval{max-height:min(100%,300px);padding:10px;margin-bottom:10px;white-space:nowrap}.hide-code .benchmarks .eval{margin:0;padding:0 10px}.benchmarks .eval.pre{white-space:pre}.benchmarks .eval.error{background-color:#200;color:#f87}.benchmarks .eval:empty{display:none}.benchmarks .ms:after{content:"ms";margin-left:3px}.benchmarks .log{padding-left:10px}.benchmarks .log .title{visibility:hidden}.benchmarking .benchmarks .log .title{visibility:visible}.benchmarks .log b{color:var(--color-green);font-weight:400}
`;HTMLElement.prototype.insert=function(n,o,...e){if(typeof e[0]=="object"){const r=e.shift();o=new Function(Object.keys(r).join(","),"return `"+o+"`")(...Object.values(r))}const s=document.createElement("div");s.innerHTML=o;const u=s.children[0];return this.insertAdjacentElement(n,s.children[0]),[u,...e.map(r=>u.querySelector(r))]},HTMLElement.prototype.append=function(){return this.insert("beforeend",...arguments)},HTMLElement.prototype.prepend=function(){return this.insert("afterbegin",...arguments)},Promise.timeout=function(n){return new Promise(o=>setTimeout(o,n))},Promise.requestAnimationFrame=function(){return new Promise(n=>requestAnimationFrame(n))},Array.prototype.trim=function(n=o=>!o){const o=(u,r)=>!n(u,r,this),e=this.findIndex(o);if(e===this.length-1)return[];const s=this.findLastIndex(o);return this.splice(s+1),this.splice(0,e),this};const containerTpl=`<div class="benchmarks">
    <dialog><textarea></textarea></dialog>
    <div class="row toolbar">
        <button class="run-benchmark" title="Run 5 times for optimal result">
            <svg fill="#FFFFFF" height="12" width="12" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                viewBox="0 0 512 512" xml:space="preserve">
                <g>
                    <g>
                        <path d="M500.203,236.907L30.869,2.24c-6.613-3.285-14.443-2.944-20.736,0.939C3.84,7.083,0,13.931,0,21.333v469.333
			c0,7.403,3.84,14.251,10.133,18.155c3.413,2.112,7.296,3.179,11.2,3.179c3.264,0,6.528-0.747,9.536-2.24l469.333-234.667
			C507.435,271.467,512,264.085,512,256S507.435,240.533,500.203,236.907z" />
                    </g>
                </g>
            </svg>
            RUN</button>
            <button class="stop-benchmark">STOP</button>            
        <label><input class="run-count" type="number" min="1" max="99" style="width:50px"> times</label>
        <label style="display:none">Cycles:<input placeholder="auto" class="cycles" type="number"></label>
        <span class="btn-copy" title="Copy results in markdown">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                <path
                    d="M14,8H4c-1.103,0-2,0.897-2,2v10c0,1.103,0.897,2,2,2h10c1.103,0,2-0.897,2-2V10C16,8.897,15.103,8,14,8z" />
                <path
                    d="M20,2H10C8.896,2,8,2.896,8,4v2h1h7c1.104,0,2,0.896,2,2v7v1h2c1.104,0,2-0.896,2-2V4C22,2.896,21.104,2,20,2z" />
            </svg>
        </span>
        <!--<button class="back-to-code">Back to code</button>
        <button class="toggle-code"></button>-->
    </div>
    <div class="test-list">
        <div class="run-status"></div>
        <div class="run-title"></div>
    </div>
    <div class="license">
        <a target="_blank" href="https://github.com/silentmantra/benchmark">
            https://github.com/silentmantra/benchmark
        </a>
    </div>
</div>`,benchmarkTpl=`<div>
    <div class="eval"></div>
    <div class="log"></div>
</div>`,groupTpl=`<div class="benchmark-group">
    <pre class="title" name="\${title}">\${title}</pre>
    <div class="benchmarks"></div>
</div>`;document.head.append(`<style>${styles}</style>`),document.body.classList.add("hide-code");const plural=new Intl.PluralRules("en",{type:"ordinal"}),suffixes=new Map([["one","st"],["two","nd"],["few","rd"],["other","th"]]),formatOrdinals=n=>{const o=plural.select(n),e=suffixes.get(o);return`${n}${e}`};init();async function init(){let scriptContainer=document.querySelector("script[name=benchmark],script[benchmark]");if(scriptContainer||(scriptContainer=[...document.querySelectorAll("script")].find(n=>n.textContent.match(/^\s*\/\/\s*@benchmark/m))),!scriptContainer){document.body.innerText="no benchmark script found";return}const $chunk=config("$chunk"),$length=config("$length"),chunks=$chunk||$length?[1,10,100,1e3]:[1];let chunkLength;const getChunkLength=()=>chunkLength??(chunkLength=typeof $chunk=="function"?$chunk().length:$chunk?$chunk.length:$length),inputFillScript=(n=1)=>`
        let $chunkCount = ${n};
        if (Array.isArray($input)){
            if (typeof $chunk === 'function') {
                while($chunkCount--) $input.push(...$chunk());
            } else {
                while($chunkCount--) $input.push(...$chunk);
            }
        } else {
            while($chunkCount--) $input += $chunk;
        }
    `,lengthMultiplyScript=(n=1)=>`
         $length *= ${n};
    `,getBeforeScript=(n=1,o="")=>{let e=beforeScript;return $chunk&&(e=e.replace("/* @input fill */",inputFillScript(n))),$length&&(e=e.replace("/* @length multiply */",lengthMultiplyScript(n))),o&&(e+=";"+o),e+=";",e};let beforeScript="";const scripts=[];let group="_default";const _groups={};let script,commented=!1;for(let n of scriptContainer.textContent.split(`
`)){if(/^\s*\/\*/.test(n)){commented=!0;continue}else if(commented&&/\*\/\s*$/.test(n)){commented=!1;continue}else if(commented)continue;if(/^\s*\/\/\s*@(end|footer)|^\s*\/\*\s*@end\s*\*\//.test(n))break;const o=n.match(new RegExp("(?<=@group\\s+).+(?=\\s*)$"));if(o){group=o[0];continue}const e=n.match(new RegExp("(?<=@benchmark\\s+).+(?=\\s*)$"));if(e){script&&scripts.push(script),_groups[group]=!0,script={title:e[0],group,source:""};continue}if(script){script.source+=n+`
`;continue}n.match(/^\s*const\s+\$input/)?n+="/* @input fill */":n.match(/^\s*let\s+\$length/)&&(n+="/* @length multiply */"),beforeScript+=n+`
`}script&&scripts.push(script);{const n=Math.max(...scripts.map(o=>o.title.length));scripts.forEach(o=>o.title=o.title.padEnd(n," "))}const[$container,$groups]=document.body.append(eval("`"+containerTpl+"`"),".test-list"),groups=[];for(const n of Object.keys(_groups)){const[o,e]=$groups.append(groupTpl,{title:n},".benchmarks"),s={title:n,$group:o,$benchmarks:e,tests:[]};for(const u of scripts.filter(({group:r})=>r===n)){const[r,t]=e.append(benchmarkTpl,{...u},".eval");(async()=>{let d;try{const[h]=await evalScript(u.source,getBeforeScript());d=JSON.stringify(h,null,4)}catch(h){d=h.message,t.classList.add("error")}let[i,p]=u.source.split(/\/\/\s*@run/);p||([p,i]=[i,p]),i??(i=""),t.innerHTML=[u.title.replace(/\s/g,"&nbsp;")+"&nbsp:",d.toString().slice(0,500)].join("&nbsp;&nbsp;"),s.tests.push({...u,code:p,pre:i,$benchmark:r,benchmark(h=1,v=1){return benchmarkScript(h===1?p:`for (let $__i = 0; $__i < ${h}; $__i++) {${p}}`,getBeforeScript(v,i))}})})()}groups.push(s)}$container.querySelector(".run-count").value=config("TIMES",5),$container.querySelector(".btn-copy").addEventListener("click",n=>{var d;const o=(d=navigator.userAgent.match(/(Chrome|Firefox)\/\d+/))==null?void 0:d[0];let e=document.querySelector(".run-title").textContent;e.length&&(e=e.replace(/^./,">"),e+=`
`);let s=`
        \`\`\`
        \` ${o}
        ---
        ${e}${groups.map(i=>{const p=i.title==="_default",h=[];return p||h.push(i.title),i.$benchmarks.querySelectorAll(".log").forEach(v=>{h.push((p?"":"&nbsp;&nbsp;&nbsp;&nbsp;")+v.textContent)}),h.join(`
`)}).join(`
`)}
        ---
        https://github.com/silentmantra/benchmark \`
        \`\`\``.replace(/^\s+/mg,"").replaceAll("&nbsp;"," ");const u=Math.max(...s.split(`
`).map(i=>i.length));s=s.replaceAll("---","-".repeat(u));const r=document.querySelector("dialog"),t=r.querySelector("textarea");r.style.opacity=0,t.textContent=s,r.showModal(),t.focus(),t.select(),document.execCommand("copy"),r.close()});let running=!1;$container.querySelector(".stop-benchmark").addEventListener("click",()=>running=!1),$container.querySelector(".run-benchmark").addEventListener("click",async n=>{document.body.classList.add("benchmarking","running"),await Promise.timeout(),running=!0,await runBenchmark(),running=!1,document.body.classList.remove("running"),document.querySelector(".run-status").innerHTML=""});async function runBenchmark(){var s,u;groups.forEach(r=>{r.tests.forEach(t=>{t.$benchmark.querySelector(".log").textContent="",t.runs=Array.from(chunks,()=>({diminisher:1}))})}),await Promise.requestAnimationFrame();let n=$container.querySelector("input.cycles").valueAsNumber;const o=+$container.querySelector("input.run-count").valueAsNumber||5,e=r=>document.querySelector(".run-status").innerHTML=r+'&nbsp;<span class="blink">...</span>';if(n)groups.forEach(r=>r.count=n);else{e("estimating cycles");for(const r of groups)for(const[t,d]of chunks.entries()){let i=1,p=r.tests;const h=[];for(;;){for(const m of p)if(m.runs[t].duration=await m.benchmark(i,d),!running)return;const v=p.filter(m=>m.runs[t].duration<20);if(h.push(...p.filter(m=>m.runs[t].duration>=100)),h.forEach(m=>m.runs[t].diminisher*=10),!v.length){((s=r.runs??(r.runs=[]))[t]??(s[t]={})).count=i*10;break}p=p.filter(m=>m.runs[t].duration<100),i*=10}}}for(let r=0;r<o;r++)for(const[t,d]of chunks.entries()){for(const{tests:i,$benchmarks:p,runs:h}of groups)for(const[v,m]of[...i].entries()){const w=m.runs[t];e(formatOrdinals(r+1)+" "+(chunks.length>1?`running ${m.title} with n=${d*getChunkLength()}`:`running ${m.title}`)),(u=m.$benchmark.querySelector(`.run-${t}`))==null||u.classList.add("blink"),await Promise.requestAnimationFrame();const _=await m.benchmark(h[t].count/w.diminisher|0,d);if(!running)return;(w.executions??(w.executions=[])).push(_),w.executions.sort((c,a)=>c-a),w.min=w.executions[0],i.sort((c,a)=>c.runs[t].min*c.runs[t].diminisher-a.runs[t].min*a.runs[t].diminisher).forEach(c=>p.appendChild(c.$benchmark));const C=(i[0].runs[t].min||0)*i[0].runs[t].diminisher;i.forEach((c,a)=>{if(a){const l=c.runs[t].min*c.runs[t].diminisher/C;c.runs[t].diff=isNaN(l)?"":l.toFixed(2)+"x"}else c.runs[t].diff="1.00x"}),i.sort((c,a)=>(c=c.runs.findLast(l=>l.executions),a=a.runs.findLast(l=>l.executions),!c||!a?0:c.min*c.diminisher-a.min*a.diminisher)).forEach(c=>p.appendChild(c.$benchmark));const S=c=>{if(isNaN(c))return"";const a=c.toString().length,l=(a-1)/3|0,k=["","k","m","b"];return"x"+c.toString().slice(0,1+(a-1)%3)+k[l]},L=c=>(c/1e3).toFixed(1).replace(/^0/,"")+"s";for(const[c,a]of i.filter(l=>l.runs[t].executions).entries()){const l=k=>{const y=i.map(k);return(y[c]??"").toString().padStart(Math.max(...y.map(g=>(g==null?void 0:g.toString().length)||0))," ")};if(chunks.length===1)a.$benchmark.querySelector(".log").innerHTML=['<span class="title">'+a.title.replace(/\s/g," ")+" </span>",'<b class="color-orange run-0" title="Difference from fastest solution (with fastest results)">'+l(k=>k.runs[0].diff)+"</b>","|",'<span title="Number of cycles">'+l(k=>"x"+h[0].count/k.runs[0].diminisher)+"</span>",...a.runs[0].executions.map((k,y)=>"<b>"+l(b=>{var g;return(g=b.runs[t].executions)==null?void 0:g[y]})+"</b>")].join(" ");else{a.$benchmark.querySelector(".log").innerHTML=['<span class="title">'+a.title.replace(/\s/g," ")+" </span>",a.runs.filter(y=>y.executions).map((y,b)=>{const g=`n=${chunks[b]*getChunkLength()}`;return(`<b class="color-orange run-${b}" title="Difference from fastest solution (with fastest results)">`+l(f=>f.runs[b].diff)+' <span class="color-gray">'+l(f=>S(h[b].count/f.runs[b].diminisher))+" <b>"+l(f=>{var x;return(x=f.runs[b].executions)==null?void 0:x[0]})+"</b></span></b>").padStart(g.length," ")}).join(" | ")].join("  ");const k=document.querySelector(".run-title");k.innerHTML=[" ".repeat(a.title.length)+" ",chunks.map((y,b)=>{const g=`n=${y*getChunkLength()}`;if(!a.runs[b].executions)return"";const $=l(f=>f.runs[b].diff)+" "+l(f=>S(h[b].count/f.runs[b].diminisher))+" "+l(f=>{var x;return(x=f.runs[b].executions)==null?void 0:x[0]});return g.padStart(($.length+g.length)/2," ").padEnd($.length," ")}).filter(Boolean).join(" | ")].join("  ")}}if(m!==i.at(-1)&&await Promise.timeout(1e3),!running)return}if(r<o.length-1&&await Promise.timeout(1e3),!running)return}}}async function benchmarkScript(n,o=""){const e=document.createElement("script"),s=Math.random().toString().slice(2).split("").reverse().join("");return e.src="data:text/javascript;base64,"+btoa(`
        try {
            ${o}
            const __$start$ = performance.now();
            ${n};
            window.__duration${s} = Math.round(performance.now() - __$start$);
        } catch (e) {
            window.__error${s} = e;
        }
    `),document.body.appendChild(e),new Promise((u,r)=>{e.onload=()=>{if(window["__error"+s]){const d=window["__error"+s];delete window["__error"+s],r(d)}const t=window["__duration"+s];delete window["__duration"+s],location.host==="localhost"||e.remove(),u(t)},e.onerror=r})}async function evalScript(n,o=""){const e=document.createElement("script"),s=Math.random().toString().slice(2).split("").reverse().join(""),u="`"+n.replaceAll("\\","\\\\").replaceAll("`","\\`")+"`";return e.src="data:text/javascript;base64,"+btoa(`
        try {
            ${o}
            window.__result${s} = eval(${u});
        } catch (e) {
            window.__error${s} = e;
        }
    `),document.body.appendChild(e),new Promise((r,t)=>{e.onload=()=>{if(window["__error"+s]){const i=window["__error"+s];delete window["__error"+s],t(i)}const d=window["__result"+s];delete window["__result"+s],location.host==="localhost"||e.remove(),r([d])},e.onerror=t})}function config(name,...vals){try{return eval(name)}catch(n){return vals.find(Boolean)}}})();
